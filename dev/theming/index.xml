<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction to theming on Project OutFox Wiki</title><link>https://outfox.wiki/dev/theming/</link><description>Recent content in Introduction to theming on Project OutFox Wiki</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://outfox.wiki/dev/theming/index.xml" rel="self" type="application/rss+xml"/><item><title>The Structure of folders</title><link>https://outfox.wiki/dev/theming/Theming-1-Folders/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://outfox.wiki/dev/theming/Theming-1-Folders/</guid><description>A theme can consist of the following folders. All of them are optional, but needed to perform certain operations on how to load / fetch files.
It is important to understand that themes in newer versions of StepMania/OutFox rely on _fallback, a special theme folder located on Appearance/Themes/ which contains all of the information neccessary to run any kind of theme. Earlier in the day, since there was no such thing, every theme distributed had to contain the same information in order to run, which in term would lead to a lot of repeated code for something that was never used.</description></item><item><title>Creating a custom screen</title><link>https://outfox.wiki/dev/theming/Theming-2-Screen-Creation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://outfox.wiki/dev/theming/Theming-2-Screen-Creation/</guid><description>OutFox allows for creations of screens outside of the engine scope. This can be useful for elements that want to, for example, have no involvement with the engine at all, and want to process information with your own custom code.
Creation of screen definitions For this, you will need to add the following to the metrics.ini file, mentioned on a previous chapter.
# This will be the name for the screen, which we can access in a moment using a metric command or lua.</description></item><item><title>Anatomy of a screen</title><link>https://outfox.wiki/dev/theming/Theming-3-Anatomy-Screen/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://outfox.wiki/dev/theming/Theming-3-Anatomy-Screen/</guid><description>A screen generarly consists of 4 separate elements, and 3 special transitional elements, which are its layers. These can contain any kind of object, so they can be Lua scripts, images, video, you name it. These follow a draw order rule to display them.
From draw on top to last (Marked red are the transition-specific layers): graph LR In:::Transition --> Out:::Transition --> Cancel:::Transition --> Decorations --> Overlay --> Underlay --> Background; classDef Transition fill:#f55 To create a file for a specific layer, just name the file as [ScreenName] [layer kind], so for example a Lua file that will control the Overlay layer from ScreenTitleMenu.</description></item><item><title>Creating a Font</title><link>https://outfox.wiki/dev/theming/Theming-4-Creating-Font/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://outfox.wiki/dev/theming/Theming-4-Creating-Font/</guid><description>Most themes use custom fonts, which are bitmap images with a bundled INI file that contains information about its width and height information for the engine to then process as glyphs. You can think of them as images that represent each letter.
We have a BitmapText actor, with a default font (Common Normal) that has the following text:
Def.BitmapText{ Font = &amp;#34;Common Normal&amp;#34;, Text = &amp;#34;This is my text&amp;#34;, InitCommand = function(self) -- Center the BitmapText actor.</description></item><item><title>Scripts</title><link>https://outfox.wiki/dev/theming/Theming-Scripts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://outfox.wiki/dev/theming/Theming-Scripts/</guid><description>Introduced in StepMania 3.95, Scripts are Lua files that are loaded globally to the engine. These are always available to use, from anywhere in the theme. However, it is advised to use these sparingly to avoid unnecesary carry over of data, overlapping variable names with other existing Lua naming scopes, and others.
It is recommended practice to ensure script data is kept to a minimum to avoid collision with objects like song data, scores, player data, mods, profile information, song rates, and others.</description></item><item><title>Custom Input</title><link>https://outfox.wiki/dev/theming/Theming-Custom-Input/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://outfox.wiki/dev/theming/Theming-Custom-Input/</guid><description>OutFox allows custom input to be managed by the theme itself. This allows you full sandboxed control of the game for the purposes of the theme.
Implementing Input Module method (OutFox Alpha 4 and onwards) More direct method (Works on legacy versions of SM5) Anatomy of the event variable The Device Input Table Understanding Press Events Mouse Input General Recommendations Remove the callback when leaving the screen Implementing Input There are a few ways to implement input, but the general action is to call Screen:AddInputCallback( input function ) to the ActorFrame responsible for the input.</description></item><item><title>Modules</title><link>https://outfox.wiki/dev/theming/Theming-Modules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://outfox.wiki/dev/theming/Theming-Modules/</guid><description>Introduced in OutFox Alpha 4, Modules are Lua files that provide snippet-like functions, tables, and metatables that can be quickly used and unloaded from memory when done. These can be loaded by using the LoadModule function. Depending on the return methodology from the module, it can be called in several ways.
Given the loading nature of modules, it is not recommended to use LoadModule directly if the function that will load it is called too quickly (like calling the module inside of a JudgmentMessageCommand), specially with modules that require file loading/saving.</description></item><item><title>Sounds</title><link>https://outfox.wiki/dev/theming/Theming-Sounds/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://outfox.wiki/dev/theming/Theming-Sounds/</guid><description>Your theme can contain sounds, which are either sound effects or music that will play across screens or actions. You can find the difference between these items by looking at their file names. The structure goes as follows:
[The name of the screen] [engine defined action / music / custom set controlled by lua] There are specific elements that are loaded by the engine to perform sound playback, for example, when moving up or down on a options menu, it will grab ScreenOptions prev/next for its sound effects.</description></item><item><title>Theming differences between older versions</title><link>https://outfox.wiki/dev/theming/Theming-0-Differences/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://outfox.wiki/dev/theming/Theming-0-Differences/</guid><description>It is important to note the following aspects when starting to make your theme, depending on how much you&amp;rsquo;ve experimented on existing themes, and compare the practices of such actions compared to now.
There are no things such as &amp;ldquo;header&amp;rdquo;, &amp;ldquo;help&amp;rdquo; and &amp;ldquo;footer&amp;rdquo; by default Date of change: starting on SM-SSC
You may have noticed themes even in SM5 and later that include header and footer, while technically they exist on those theme&amp;rsquo;s scopes, they are not created by the engine.</description></item></channel></rss>