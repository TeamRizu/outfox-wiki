<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Actor on Project OutFox Wiki</title><link>https://outfox.wiki/dev/actors/actortypes/actor/</link><description>Recent content in Actor on Project OutFox Wiki</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://outfox.wiki/dev/actors/actortypes/actor/index.xml" rel="self" type="application/rss+xml"/><item><title>Obtaining Childs and ActorFrame Levels</title><link>https://outfox.wiki/dev/actors/actortypes/actor/obtainlevels/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://outfox.wiki/dev/actors/actortypes/actor/obtainlevels/</guid><description>When using Actors, you can use self:GetParent() and self:GetChild() to get elements from other ActorFrames or Actors. self:GetChild() can only be used by ActorFrames. You can think of an ActorFrame as a tree of objects. This is the original table. And now you&amp;rsquo;ve called GetParent on the ActorProxy. Def.ActorFrame{ Def.BitmapText{ Name=&amp;#34;MyText&amp;#34; }, * Def.ActorProxy{ OnCommand=function(self) self:GetParent() end }, } graph LR AF[Def.ActorFrame] --- BT(Def.BitmapText) &amp; AP(Def.ActorProxy) style AF stroke-width:4px style BT stroke-width:4px style AP fill:#585,color:#fff,stroke-width:4px When calling it, you go back up a level, which in this case, it will become ActorFrame.</description></item><item><title>Anatomy of an Actor</title><link>https://outfox.wiki/dev/actors/actortypes/actor/ActorsLua-Anatomy+Structure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://outfox.wiki/dev/actors/actortypes/actor/ActorsLua-Anatomy+Structure/</guid><description>Every actor in SM5 follows a standart general structure, with ActorFrames being more flexible in how they&amp;rsquo;re constructed.
General layout Commands General layout Def.Actor { Name= &amp;#34;Example Actor&amp;#34;, InitCommand= function(self) self:zoom(100) end, OnCommand= function(self) self:linear(2):x(30) end, } Every actor starts with a Def. prefix, followed by the actor type itself. An actor can have a name and commands. These commands could be anything, as long as it&amp;rsquo;s suffixed with a Command or MessageCommand, depending on the type of commands needed.</description></item></channel></rss>